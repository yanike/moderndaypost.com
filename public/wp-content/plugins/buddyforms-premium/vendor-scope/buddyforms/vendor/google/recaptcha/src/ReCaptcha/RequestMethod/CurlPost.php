<?php
 namespace tk\ReCaptcha\RequestMethod; use tk\ReCaptcha\ReCaptcha; use tk\ReCaptcha\RequestMethod; use tk\ReCaptcha\RequestParameters; class CurlPost implements \tk\ReCaptcha\RequestMethod { private $curl; private $siteVerifyUrl; public function __construct(\tk\ReCaptcha\RequestMethod\Curl $curl = null, $siteVerifyUrl = null) { $this->curl = \is_null($curl) ? new \tk\ReCaptcha\RequestMethod\Curl() : $curl; $this->siteVerifyUrl = \is_null($siteVerifyUrl) ? \tk\ReCaptcha\ReCaptcha::SITE_VERIFY_URL : $siteVerifyUrl; } public function submit(\tk\ReCaptcha\RequestParameters $params) { $handle = $this->curl->init($this->siteVerifyUrl); $options = array(\CURLOPT_POST => \true, \CURLOPT_POSTFIELDS => $params->toQueryString(), \CURLOPT_HTTPHEADER => array('Content-Type: application/x-www-form-urlencoded'), \CURLINFO_HEADER_OUT => \false, \CURLOPT_HEADER => \false, \CURLOPT_RETURNTRANSFER => \true, \CURLOPT_SSL_VERIFYPEER => \true); $this->curl->setoptArray($handle, $options); $response = $this->curl->exec($handle); $this->curl->close($handle); if ($response !== \false) { return $response; } return '{"success": false, "error-codes": ["' . \tk\ReCaptcha\ReCaptcha::E_CONNECTION_FAILED . '"]}'; } } 