<?php
 namespace tk\GuzzleHttp\Psr7; use tk\Psr\Http\Message\StreamInterface; class InflateStream implements \tk\Psr\Http\Message\StreamInterface { use StreamDecoratorTrait; public function __construct(\tk\Psr\Http\Message\StreamInterface $stream) { $header = $stream->read(10); $filenameHeaderLength = $this->getLengthOfPossibleFilenameHeader($stream, $header); $stream = new \tk\GuzzleHttp\Psr7\LimitStream($stream, -1, 10 + $filenameHeaderLength); $resource = \tk\GuzzleHttp\Psr7\StreamWrapper::getResource($stream); \stream_filter_append($resource, 'zlib.inflate', \STREAM_FILTER_READ); $this->stream = $stream->isSeekable() ? new \tk\GuzzleHttp\Psr7\Stream($resource) : new \tk\GuzzleHttp\Psr7\NoSeekStream(new \tk\GuzzleHttp\Psr7\Stream($resource)); } private function getLengthOfPossibleFilenameHeader(\tk\Psr\Http\Message\StreamInterface $stream, $header) { $filename_header_length = 0; if (\substr(\bin2hex($header), 6, 2) === '08') { $filename_header_length = 1; while ($stream->read(1) !== \chr(0)) { $filename_header_length++; } } return $filename_header_length; } } 