<?php
 namespace tk\GuzzleHttp\Promise; final class Create { public static function promiseFor($value) { if ($value instanceof \tk\GuzzleHttp\Promise\PromiseInterface) { return $value; } if (\is_object($value) && \method_exists($value, 'then')) { $wfn = \method_exists($value, 'wait') ? [$value, 'wait'] : null; $cfn = \method_exists($value, 'cancel') ? [$value, 'cancel'] : null; $promise = new \tk\GuzzleHttp\Promise\Promise($wfn, $cfn); $value->then([$promise, 'resolve'], [$promise, 'reject']); return $promise; } return new \tk\GuzzleHttp\Promise\FulfilledPromise($value); } public static function rejectionFor($reason) { if ($reason instanceof \tk\GuzzleHttp\Promise\PromiseInterface) { return $reason; } return new \tk\GuzzleHttp\Promise\RejectedPromise($reason); } public static function exceptionFor($reason) { if ($reason instanceof \Exception || $reason instanceof \Throwable) { return $reason; } return new \tk\GuzzleHttp\Promise\RejectionException($reason); } public static function iterFor($value) { if ($value instanceof \Iterator) { return $value; } if (\is_array($value)) { return new \ArrayIterator($value); } return new \ArrayIterator([$value]); } } 