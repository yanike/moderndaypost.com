<?php
 namespace tk\GuzzleHttp\Promise; function queue(\tk\GuzzleHttp\Promise\TaskQueueInterface $assign = null) { return \tk\GuzzleHttp\Promise\Utils::queue($assign); } function task(callable $task) { return \tk\GuzzleHttp\Promise\Utils::task($task); } function promise_for($value) { return \tk\GuzzleHttp\Promise\Create::promiseFor($value); } function rejection_for($reason) { return \tk\GuzzleHttp\Promise\Create::rejectionFor($reason); } function exception_for($reason) { return \tk\GuzzleHttp\Promise\Create::exceptionFor($reason); } function iter_for($value) { return \tk\GuzzleHttp\Promise\Create::iterFor($value); } function inspect(\tk\GuzzleHttp\Promise\PromiseInterface $promise) { return \tk\GuzzleHttp\Promise\Utils::inspect($promise); } function inspect_all($promises) { return \tk\GuzzleHttp\Promise\Utils::inspectAll($promises); } function unwrap($promises) { return \tk\GuzzleHttp\Promise\Utils::unwrap($promises); } function all($promises, $recursive = \false) { return \tk\GuzzleHttp\Promise\Utils::all($promises, $recursive); } function some($count, $promises) { return \tk\GuzzleHttp\Promise\Utils::some($count, $promises); } function any($promises) { return \tk\GuzzleHttp\Promise\Utils::any($promises); } function settle($promises) { return \tk\GuzzleHttp\Promise\Utils::settle($promises); } function each($iterable, callable $onFulfilled = null, callable $onRejected = null) { return \tk\GuzzleHttp\Promise\Each::of($iterable, $onFulfilled, $onRejected); } function each_limit($iterable, $concurrency, callable $onFulfilled = null, callable $onRejected = null) { return \tk\GuzzleHttp\Promise\Each::ofLimit($iterable, $concurrency, $onFulfilled, $onRejected); } function each_limit_all($iterable, $concurrency, callable $onFulfilled = null) { return \tk\GuzzleHttp\Promise\Each::ofLimitAll($iterable, $concurrency, $onFulfilled); } function is_fulfilled(\tk\GuzzleHttp\Promise\PromiseInterface $promise) { return \tk\GuzzleHttp\Promise\Is::fulfilled($promise); } function is_rejected(\tk\GuzzleHttp\Promise\PromiseInterface $promise) { return \tk\GuzzleHttp\Promise\Is::rejected($promise); } function is_settled(\tk\GuzzleHttp\Promise\PromiseInterface $promise) { return \tk\GuzzleHttp\Promise\Is::settled($promise); } function coroutine(callable $generatorFn) { return \tk\GuzzleHttp\Promise\Coroutine::of($generatorFn); } 