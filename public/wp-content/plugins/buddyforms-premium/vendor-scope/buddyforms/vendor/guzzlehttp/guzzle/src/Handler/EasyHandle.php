<?php
 namespace tk\GuzzleHttp\Handler; use tk\GuzzleHttp\Psr7\Response; use tk\GuzzleHttp\Utils; use tk\Psr\Http\Message\RequestInterface; use tk\Psr\Http\Message\ResponseInterface; use tk\Psr\Http\Message\StreamInterface; final class EasyHandle { public $handle; public $sink; public $headers = []; public $response; public $request; public $options = []; public $errno = 0; public $onHeadersException; public $createResponseException; public function createResponse() : void { if (empty($this->headers)) { throw new \RuntimeException('No headers have been received'); } $startLine = \explode(' ', \array_shift($this->headers), 3); $headers = \tk\GuzzleHttp\Utils::headersFromLines($this->headers); $normalizedKeys = \tk\GuzzleHttp\Utils::normalizeHeaderKeys($headers); if (!empty($this->options['decode_content']) && isset($normalizedKeys['content-encoding'])) { $headers['x-encoded-content-encoding'] = $headers[$normalizedKeys['content-encoding']]; unset($headers[$normalizedKeys['content-encoding']]); if (isset($normalizedKeys['content-length'])) { $headers['x-encoded-content-length'] = $headers[$normalizedKeys['content-length']]; $bodyLength = (int) $this->sink->getSize(); if ($bodyLength) { $headers[$normalizedKeys['content-length']] = $bodyLength; } else { unset($headers[$normalizedKeys['content-length']]); } } } $statusCode = (int) $startLine[1]; $this->response = new \tk\GuzzleHttp\Psr7\Response($statusCode, $headers, $this->sink, \substr($startLine[0], 5), isset($startLine[2]) ? (string) $startLine[2] : null); } public function __get($name) { $msg = $name === 'handle' ? 'The EasyHandle has been released' : 'Invalid property: ' . $name; throw new \BadMethodCallException($msg); } } 